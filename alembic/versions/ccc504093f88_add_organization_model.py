"""Add organization model

Revision ID: ccc504093f88
Revises: 
Create Date: 2025-07-23 07:48:57.581626

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ccc504093f88'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_name', sa.String(length=100), nullable=False),
    sa.Column('org_type', postgresql.ENUM('winery', 'vineyard', 'orchard', 'farm', 'coffee_estate', 'processing_facility', name='org_type_enum'), nullable=False),
    sa.Column('agricultural_profile', sa.JSON(), nullable=True),
    sa.Column('ui_preferences', sa.JSON(), nullable=True),
    sa.Column('subscription_tier', postgresql.ENUM('free', 'basic', 'premium', 'enterprise', name='subscription_tier_enum'), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_name')
    )
    op.create_index(op.f('ix_organizations_id'), 'organizations', ['id'], unique=False)
    op.create_table('properties',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('property_name', sa.String(length=100), nullable=False),
    sa.Column('property_type', postgresql.ENUM('vineyard', 'orchard', 'ranch', 'farm', 'coffee_estate', name='property_type_enum'), nullable=False),
    sa.Column('primary_crops', sa.JSON(), nullable=True),
    sa.Column('business_functions', sa.JSON(), nullable=True),
    sa.Column('street_address', sa.Text(), nullable=True),
    sa.Column('city', sa.String(length=50), nullable=True),
    sa.Column('state', sa.String(length=50), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('country_code', sa.String(length=2), nullable=True),
    sa.Column('latitude', sa.DECIMAL(precision=10, scale=8), nullable=True),
    sa.Column('longitude', sa.DECIMAL(precision=11, scale=8), nullable=True),
    sa.Column('elevation_ft', sa.Integer(), nullable=True),
    sa.Column('total_acres', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('planted_acres', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_properties_id'), 'properties', ['id'], unique=False)
    op.create_table('blocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('property_id', sa.Integer(), nullable=False),
    sa.Column('block_name', sa.String(length=100), nullable=False),
    sa.Column('crop_type', postgresql.ENUM('grape', 'apple', 'cherry', 'pear', 'coffee', 'avocado', 'citrus', 'stone_fruit', 'berry', 'nut', 'other', name='crop_type_enum'), nullable=False),
    sa.Column('variety', sa.String(length=50), nullable=True),
    sa.Column('rootstock', sa.String(length=50), nullable=True),
    sa.Column('clone', sa.String(length=50), nullable=True),
    sa.Column('planting_year', sa.Integer(), nullable=True),
    sa.Column('planting_density', sa.Integer(), nullable=True),
    sa.Column('trellis_system', sa.String(length=50), nullable=True),
    sa.Column('harvest_method', postgresql.ENUM('hand_picked', 'machine_harvested', 'strip_picked', 'selective_pick', name='harvest_method_enum'), nullable=True),
    sa.Column('processing_type', sa.String(length=100), nullable=True),
    sa.Column('acres', sa.DECIMAL(precision=6, scale=2), nullable=True),
    sa.Column('slope_degree', sa.DECIMAL(precision=4, scale=1), nullable=True),
    sa.Column('aspect', postgresql.ENUM('N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW', name='aspect_enum'), nullable=True),
    sa.Column('soil_type', sa.String(length=100), nullable=True),
    sa.Column('is_organic', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_blocks_id'), 'blocks', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_blocks_id'), table_name='blocks')
    op.drop_table('blocks')
    op.drop_index(op.f('ix_properties_id'), table_name='properties')
    op.drop_table('properties')
    op.drop_index(op.f('ix_organizations_id'), table_name='organizations')
    op.drop_table('organizations')
    # ### end Alembic commands ###
