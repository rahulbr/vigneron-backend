"""add_revised_data_model_v1_1

Revision ID: 98cd887f3634
Revises: 392fbcb95244
Create Date: 2025-07-28 07:54:52.986206

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '98cd887f3634'
down_revision: Union[str, None] = '392fbcb95244'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('spray_products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_name', sa.String(length=200), nullable=False),
    sa.Column('manufacturer', sa.String(length=100), nullable=False),
    sa.Column('epa_registration_number', sa.String(length=50), nullable=True),
    sa.Column('active_ingredients', sa.JSON(), nullable=False),
    sa.Column('product_type', sa.String(length=50), nullable=False),
    sa.Column('frac_code', sa.String(length=10), nullable=True),
    sa.Column('irac_code', sa.String(length=10), nullable=True),
    sa.Column('hrac_code', sa.String(length=10), nullable=True),
    sa.Column('resistance_risk', sa.String(length=10), nullable=True),
    sa.Column('restricted_use_pesticide', sa.Boolean(), nullable=True),
    sa.Column('organic_approved', sa.Boolean(), nullable=True),
    sa.Column('signal_word', sa.String(length=10), nullable=True),
    sa.Column('min_rate_per_acre', sa.DECIMAL(precision=10, scale=3), nullable=True),
    sa.Column('max_rate_per_acre', sa.DECIMAL(precision=10, scale=3), nullable=True),
    sa.Column('rate_units', sa.String(length=20), nullable=True),
    sa.Column('default_rei_hours', sa.Integer(), nullable=True),
    sa.Column('default_phi_days', sa.Integer(), nullable=True),
    sa.Column('cost_per_unit', sa.DECIMAL(precision=10, scale=3), nullable=True),
    sa.Column('unit_size', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('unit_type', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_spray_products_id'), 'spray_products', ['id'], unique=False)
    op.create_table('financial_transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('transaction_date', sa.Date(), nullable=False),
    sa.Column('transaction_type', sa.String(length=20), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=12, scale=2), nullable=False),
    sa.Column('block_id', sa.Integer(), nullable=True),
    sa.Column('spray_application_id', sa.Integer(), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_financial_transactions_id'), 'financial_transactions', ['id'], unique=False)
    op.create_table('rows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('block_id', sa.Integer(), nullable=False),
    sa.Column('row_number', sa.Integer(), nullable=False),
    sa.Column('variety', sa.String(length=50), nullable=True),
    sa.Column('clone', sa.String(length=50), nullable=True),
    sa.Column('rootstock', sa.String(length=50), nullable=True),
    sa.Column('planting_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('vine_count', sa.Integer(), nullable=True),
    sa.Column('row_length_ft', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('vine_spacing_ft', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('trellis_system', sa.String(length=100), nullable=True),
    sa.Column('training_method', sa.String(length=100), nullable=True),
    sa.Column('wire_count', sa.Integer(), nullable=True),
    sa.Column('post_spacing_ft', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('gps_start_point', geoalchemy2.types.Geometry(geometry_type='POINT', dimension=2, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('gps_end_point', geoalchemy2.types.Geometry(geometry_type='POINT', dimension=2, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_rows_gps_end_point', 'rows', ['gps_end_point'], unique=False, postgresql_using='gist')
    op.create_index('idx_rows_gps_start_point', 'rows', ['gps_start_point'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_rows_id'), 'rows', ['id'], unique=False)
    op.create_table('individual_vines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('row_id', sa.Integer(), nullable=False),
    sa.Column('vine_number', sa.Integer(), nullable=False),
    sa.Column('variety', sa.String(length=50), nullable=True),
    sa.Column('clone', sa.String(length=50), nullable=True),
    sa.Column('rootstock', sa.String(length=50), nullable=True),
    sa.Column('planting_date', sa.Date(), nullable=True),
    sa.Column('graft_union_height', sa.DECIMAL(precision=4, scale=2), nullable=True),
    sa.Column('vine_status', sa.String(length=20), nullable=True),
    sa.Column('trunk_diameter_mm', sa.DECIMAL(precision=6, scale=2), nullable=True),
    sa.Column('trellis_system', sa.String(length=100), nullable=True),
    sa.Column('training_method', sa.String(length=100), nullable=True),
    sa.Column('pruning_method', sa.String(length=100), nullable=True),
    sa.Column('spur_count', sa.Integer(), nullable=True),
    sa.Column('cane_count', sa.Integer(), nullable=True),
    sa.Column('canopy_vigor', sa.String(length=20), nullable=True),
    sa.Column('fruit_quality_rating', sa.String(length=20), nullable=True),
    sa.Column('historical_yield_kg', sa.DECIMAL(precision=6, scale=2), nullable=True),
    sa.Column('gps_coordinates', geoalchemy2.types.Geometry(geometry_type='POINT', dimension=2, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['row_id'], ['rows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_individual_vines_gps_coordinates', 'individual_vines', ['gps_coordinates'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_individual_vines_id'), 'individual_vines', ['id'], unique=False)
    op.add_column('blocks', sa.Column('primary_variety', sa.String(length=50), nullable=True))
    op.add_column('blocks', sa.Column('primary_clone', sa.String(length=50), nullable=True))
    op.add_column('blocks', sa.Column('primary_rootstock', sa.String(length=50), nullable=True))
    op.add_column('blocks', sa.Column('mixed_genetics', sa.Boolean(), nullable=True))
    op.add_column('blocks', sa.Column('row_count', sa.Integer(), nullable=True))
    op.add_column('blocks', sa.Column('row_spacing_ft', sa.DECIMAL(precision=5, scale=2), nullable=True))
    op.add_column('blocks', sa.Column('vine_spacing_ft', sa.DECIMAL(precision=5, scale=2), nullable=True))
    op.add_column('blocks', sa.Column('gps_center_point', geoalchemy2.types.Geometry(geometry_type='POINT', dimension=2, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True))
    op.add_column('blocks', sa.Column('gps_boundary', geoalchemy2.types.Geometry(geometry_type='POLYGON', dimension=2, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True))
    op.add_column('blocks', sa.Column('training_method', sa.String(length=100), nullable=True))
    op.alter_column('blocks', 'trellis_system',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.create_index('idx_blocks_gps_boundary', 'blocks', ['gps_boundary'], unique=False, postgresql_using='gist')
    op.create_index('idx_blocks_gps_center_point', 'blocks', ['gps_center_point'], unique=False, postgresql_using='gist')
    op.add_column('properties', sa.Column('default_trellis_system', sa.String(length=100), nullable=True))
    op.add_column('properties', sa.Column('default_training_method', sa.String(length=100), nullable=True))
    op.add_column('properties', sa.Column('gps_boundary', geoalchemy2.types.Geometry(geometry_type='POLYGON', dimension=2, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True))
    op.create_index('idx_properties_gps_boundary', 'properties', ['gps_boundary'], unique=False, postgresql_using='gist')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_properties_gps_boundary', table_name='properties', postgresql_using='gist')
    op.drop_column('properties', 'gps_boundary')
    op.drop_column('properties', 'default_training_method')
    op.drop_column('properties', 'default_trellis_system')
    op.drop_index('idx_blocks_gps_center_point', table_name='blocks', postgresql_using='gist')
    op.drop_index('idx_blocks_gps_boundary', table_name='blocks', postgresql_using='gist')
    op.alter_column('blocks', 'trellis_system',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.drop_column('blocks', 'training_method')
    op.drop_column('blocks', 'gps_boundary')
    op.drop_column('blocks', 'gps_center_point')
    op.drop_column('blocks', 'vine_spacing_ft')
    op.drop_column('blocks', 'row_spacing_ft')
    op.drop_column('blocks', 'row_count')
    op.drop_column('blocks', 'mixed_genetics')
    op.drop_column('blocks', 'primary_rootstock')
    op.drop_column('blocks', 'primary_clone')
    op.drop_column('blocks', 'primary_variety')
    op.drop_index(op.f('ix_individual_vines_id'), table_name='individual_vines')
    op.drop_index('idx_individual_vines_gps_coordinates', table_name='individual_vines', postgresql_using='gist')
    op.drop_table('individual_vines')
    op.drop_index(op.f('ix_rows_id'), table_name='rows')
    op.drop_index('idx_rows_gps_start_point', table_name='rows', postgresql_using='gist')
    op.drop_index('idx_rows_gps_end_point', table_name='rows', postgresql_using='gist')
    op.drop_table('rows')
    op.drop_index(op.f('ix_financial_transactions_id'), table_name='financial_transactions')
    op.drop_table('financial_transactions')
    op.drop_index(op.f('ix_spray_products_id'), table_name='spray_products')
    op.drop_table('spray_products')
    # ### end Alembic commands ###
